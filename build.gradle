plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.6-SNAPSHOT'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'jacoco'
}

group = 'com.cb'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

jacoco {
	toolVersion = "0.8.13"
}

sourceSets {
	unitTests {
		java.srcDir file('src/test/unit/java')
		resources.srcDir file('src/test/unit/resources')
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
	integrationTest {
		java.srcDir file('src/test/integration/java')
		resources.srcDir file('src/test/integration/resources')
		compileClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.main.output
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	unitTestsImplementation.extendsFrom testImplementation
	integrationTestImplementation.extendsFrom testImplementation
}

repositories {
	mavenCentral()
	maven { url 'https://repo.spring.io/snapshot' }
}

dependencies {
	// Main dependencies
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.postgresql:postgresql'
	implementation 'com.auth0:java-jwt:4.5.0'
	implementation 'org.mapstruct:mapstruct:1.6.3'
	implementation 'org.slf4j:slf4j-api:2.0.17'
	implementation 'net.logstash.logback:logstash-logback-encoder:8.1'
	implementation 'ch.qos.logback:logback-classic:1.5.18'

	// Lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// MapStruct
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

	// Unit test dependencies
	unitTestsImplementation 'org.springframework.boot:spring-boot-starter-test'
	unitTestsImplementation 'org.springframework.security:spring-security-test'
	unitTestsImplementation 'org.mockito:mockito-inline:5.2.0'
	unitTestsRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	unitTestsAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'

	// Integration test dependencies
	integrationTestImplementation 'org.springframework.boot:spring-boot-starter-test'
	integrationTestImplementation 'org.springframework.security:spring-security-test'
	integrationTestImplementation 'org.mockito:mockito-inline:5.2.0'
	integrationTestRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	integrationTestAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.6.3'
}

// Default test task
tasks.named('test') {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

// Unit Test Task
tasks.register('unitTest', Test) {
	description = 'Runs unit tests.'
	group = 'verification'
	testClassesDirs = sourceSets.unitTests.output.classesDirs
	classpath = sourceSets.unitTests.runtimeClasspath
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

// Integration Test Task
tasks.register('integrationTest', Test) {
	description = 'Runs integration tests.'
	group = 'verification'
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	useJUnitPlatform()
}

// Run both in `./gradlew check`
tasks.named('check') {
	dependsOn tasks.named('unitTest')
}

jacocoTestReport {
	dependsOn tasks.named('unitTest')
	executionData.setFrom(file("$buildDir/jacoco/unitTest.exec"))
	reports {
		xml.required = true
		html.required = true
	}

	reports {
		xml.required = false
		html.required = true
		csv.required = false
	}

	classDirectories.setFrom(
			fileTree(dir: "$buildDir/classes/java/main", excludes: [
					'**/dto/**',
					'**/config/**'
			])
	)
	sourceDirectories.setFrom(files('src/main/java'))
}
